sample1%>%
dplyr::group_by(group)%>%
dplyr::group_by(timing,add=T)%>%
dplyr::summarize_at(.,vars(acc),funs(mean,sd,min,max))
install.packages("MuMIn")
library(MuMIn)
glm(cbind(success, try-success)~group*timing*c.TOIEC,data = dat,family = binomial)%>%dre
library(dplyr)
glm(cbind(success, try-success)~group*timing*c.TOIEC,data = dat,family = binomial)%>%dredge
glm(cbind(success, try-success)~group*timing*c.TOIEC,data = sample1,family = binomial)%>%dredge
glm(cbind(success, try-success)~group*timing*TOIEC,data = sample1,family = binomial)%>%dredge
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial)%>%dredge
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial)%>%dredge(global.model = .)
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)%>%subset(.,delta==0)
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)%>%get.models(.,subset = 1)[[1]]
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)%>%get.models(.,subset = 1)[1]
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)%>%get.models(.,subset = 1)
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial)%>%dredge(global.model = .)
glm(cbind(success, try-success)~group*timing*TOEIC,data = sample1,family = binomial,na.action = "na.fail")%>%dredge(global.model = .)
xaringan:::inf_mr()
AIC(model[[1]])-AIC(model[[2]])
model[[3]]<-glm(cbind(success,try-success)~timing+group+timing:group+c.TOEIC,
family=binomial(link="logit"),data=sample1)
summary(model3)
summary(model[[3]])
warnings()
model[[3]]<-glm(cbind(success,try-success)~timing+group+timing:group+c.TOEIC,
family=binomial(link="logit"),data=sample1)
#summary(model[[3]])
model[[3]]<-glm(cbind(success,try-success)~timing+group+timing:group+c.TOEIC,
family=binomial(link="logit"),data=sample1)
summary(model[[3]])
anova(model[[2]],model[[3]],test="Chisq")
anova(model[[2]],model[[3]],test="Chisq")
sapply(AIC)
sapply(model,AIC)
sapply(model,AIC)%>%as.data.frame
model[[2]]<-update(model[[1]],.~.-timing:group)
anova(model[[1]],model[[2]],test = "Chisq")
AIC(model[[1]])-AIC(model[[2]]) #小さい方がよいので負の値なら[[1]]がベター
model[[3]]<-update(model[[1]],.~.+c.TOEIC)
summary(model[[3]])
model[[4]]<-glm(cbind(success,try-success)~timing*group*c.TOEIC,
data=sample1,family = binomial)
summary(model[[4]])
step(model[[4]])$call
step(model[[4]])
step(model[[4]])%>%str
step(model[[4]])$formula
step(model[[4]])%>%summary
#結果が長いので省略
step(model[[4]])
#結果が長いので省略
step(model[[4]])
step(model[[4]])->model[[5]]
summary(model[[5]])
xaringan:::inf_mr()
model[[5]]
step(model[[4]])->model[[5]] #選ばれたモデルをmodel[[5]]に
```{r,eval=T,tidy=T}
#結果が長いので省略
step(model[[4]])
model[[5]]$df.residual
model[[5]]$deviance
tab_model(model[[5]])
install.packages("epiDisplay")
library(epiDisplay)
logistic.display(model[[5]])
library(broom)
tidy(model[[5]])
tidy(model[[5]],conf.int=T)
tidy(model[[5]],conf.int=T,exponentiate=T)
tab_model(model[[5]])
vif(model[[5]])
plot_model(model[[5]])
plot_model(model[[5]],type="int")
plot_model(model[[5]],type="int",terms = c("timing","group"))
plot_model(model[[5]],type="pred",terms = c("timing","group"))
emmip(model[[5]])
emmip(model[[5]],~group|timing)
emmip(model[[5]],~group|timing,CIs = T)
emmip(model[[5]],~group|timing,CIs = T,type = "response")
emmip(model[[5]],~timing|group,CIs = T,type = "response")
emmip(model[[5]],~timing|group,CIs = T,type = "response",col = c("red","green"))
plot_model(model[[5]],type="pred",terms = c("timing","c.TOEIC"))
plot_model(model[[5]],type="pred",terms = c("c.TOEIC","timing"))
plot_model(model[[5]],type="pred",terms = c("c.TOEIC","timing"))
plot_model(model[[4]],type="pred",terms = c("c.TOEIC","timing","group"))
sample1$group-1
sample1$group-0.5
sample1$group%>%as.numeric
contrast(sample1$group)
contrast(sample1$group)
contr.Treatment(sample1$group)
contr.Treatment(sample1$group)%>%str
contr.treatment(sample1$group)%>%str
contr.treatment(sample1$group,contrasts = F)%>%str
contr.treatment(sample1$group,contrasts = F)
contrasts(sample1$grouo)
contrasts(sample1$group)
contrasts(sample1$group)+1
contrasts(sample1$group)-0.5
contrasts(sample1$group)+0.5
contrasts(sample1$group)-0.5->sample1$group.e
sample1$group.e<-sample1$group
sample1$group.i<-sample1$group
contrasts(sample1$group)-0.5->contrasts(sample1$group.e)
contrasts(sample1$group)+0.5->contrasts(sample1$group.i)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%summary
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%summary
View(sample1)
contrasts(sample1$group.e)
sample1$group.e<-sample1$group
sample1$group.i<-sample1$group
contrasts(sample1$group)-0.5
contrasts(sample1$group)-1
print(my.simple)#my.simpleが-0.5, 0.5の行列になっているのを確認
contrasts(sample1$group)+0.5
contr.treatment(2)
contrasts(sample1$group.e)<-c
contrasts(sample1$group.e)
-c
contrasts(sample1$group.i)<--c
contrasts(sample1$group.i)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%summary
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%summary
contrasts(sample1$group.e)<-c
contrasts(sample1$group.e)
c-0.5
contrasts(sample1$group.e)<-c-0.5
contrasts(sample1$group.e)
contrasts(sample1$group.e)<-c-0.5
contrasts(sample1$group.e)
c-1
contr.treatment(2)
contrasts(sample1$group.e)<-contr.treatment(2)
contr.Helmert(2)
contr.poly(2)
contr.treatment(2,base = 0)
contr.treatment(2,base = 2)
contrasts(sample1$group.i)<-contr.treatment(2)
contrasts(sample1$group.e)<-contr.treatment(2,base = 2)
contrasts(sample1$group.e)
contrasts(sample1$group.i)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%summary
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%summary
sample1$group.e<-sample1$group
sample1$group.i<-sample1$group
contrasts(sample1$group)-0.5->contrasts(sample1$group.e)
contrasts(sample1$group)+0.5->contrasts(sample1$group.i)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%summary
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%summary
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%logistic.display
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
model[[5]]$coefficients%>%exp
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
contrasts(sample1$group.e)
sample1$group.e<-sample1$group
sample1$group.i<-sample1$group
contrasts(sample1$group)+0.5->contrasts(sample1$group.e)
contrasts(sample1$group)-0.5->contrasts(sample1$group.i)
glm(cbind(success, try-success)~ timing*group.e+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
glm(cbind(success, try-success)~ timing*group.i+c.TOEIC,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
sample1$timing1<-sample1$timing
sample1$timing2<-sample1$timing
contrasts(sample1$timing)+0.5->contrasts(sample1$timing1)
contrasts(sample1$timing)-0.5->contrasts(sample1$timing2)
glm(cbind(success, try-success)~ timing1*group+c.TOEIC*timing1,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
glm(cbind(success, try-success)~ timing2*group+c.TOEIC*timing2,data = sample1,family = binomial)%>%tidy(.,conf.int=T,exponentiate=T)
model[[6]]<-glm(cbind(success, try-success)~ timing1*group+c.TOEIC*timing1,data = sample1,family = binomial)
model[[6]]$coefficients
model[[6]]$coefficients%>%exp
glm(cbind(success, try-success)~ timing2*group+c.TOEIC*timing2,data = sample1,family = binomial)$coefficients%>%exp
glm(cbind(success, try-success)~ timing1*group+c.TOEIC*timing1,data = sample1,family = binomial)$coefficients%>%exp
glm(cbind(success, try-success)~ timing2*group+c.TOEIC*timing2,data = sample1,family = binomial)$coefficients%>%exp
exp(1.006*100)
exp(1.006312*100)
glm(cbind(success, try-success)~ timing1*group+c.TOEIC*timing1,data = sample1,family = binomial)$coefficients*100%>%exp #事前
glm(cbind(success, try-success)~ timing2*group+c.TOEIC*timing2,data = sample1,family = binomial)$coefficients*100%>%exp #事後
model[[6]]<-glm(cbind(success, try-success)~ timing1*group+c.TOEIC*timing1,data = sample1,family = binomial) #事前
model[[7]]<-glm(cbind(success, try-success)~ timing2*group+c.TOEIC*timing2,data = sample1,family = binomial) #事後
exp(model[[6]]$coefficients)
exp(model[[6]]$coefficients*100)
exp(model[[6]]$coefficients*100)
exp(model[[7]]$coefficients*100)
exp(model[[6]]$coefficients[4]*100)
exp(model[[7]]$coefficients[4]*100)
```{r,results="hold"}
tab_model(model[[5]])
xaringan:::inf_mr()
tab_model(model[[6]]) #引数でいろいろ調整できます
tab_model(model[[5]]) #引数でいろいろ調整できます
sample2 <-read.csv("http://bit.ly/kisoken2015Tamura_Sample2",header=T)
View(sample2)
head(sample2)
#For common nouns (CNP)
sample2%>%
dplyr::filter(Type=="CNP")%>%
dplyr::group_by(ID)%>%
dplyr::summarise(mean=mean(judgment,na.rm=T))->stat_cnp #ランダムに欠損がある場合，na.rm=Tを指定しないと欠損のある学習者のデータが落ちてしまう
stat_cnp<-as.data.frame(stat_cnp)
#Calculating descriptive statistics for common nouns
describe(stat_cnp$mean)
install.packages("beeswarm")
stat_mnp
describe(stat_cnp$mean)
describe(stat_mnp$mean)
install.packages("beeswarm")
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add = T)%>%
dplyr::summarise(mean=mean(sub.measure,na.rm=T)) ->stat_sub
stat_sub<-as.data.frame(stat_sub)
tapply(stat_sub$mean,stat_sub$Type,describe)
#taplyで"Type"
describe(stat_cnp$mean)
describe(stat_mnp$mean)
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add = T)%>%
dplyr::summarise(mean=mean(sub.measure,na.rm=T)) ->stat_sub
stat_sub<-as.data.frame(stat_sub)
tapply(stat_sub$mean,stat_sub$Type,describe)
#Type列のグルーピング変数ごとにmean列に対してdescribe関数使ってねの意味
#For RT
sample2%>%
dplyr::filter(Type=="CNP")%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
tapply(stat_rt$mean,stat_rt$sub.measure,describe)
#For RT
sample2%>%
dplyr::filter(Type=="CNP")%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
tapply(stat_rt$mean,stat_rt$sub.measure,describe)
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
tapply(stat_rt$mean,stat_rt$sub.measure,describe)
stat_rt
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise_at(vars(mean),funs(mean(.,na.rm=T),sd(na.rm=T)))
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd(na.rm=T)))
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
as.data.frame()%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd(na.rm=T)))
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
as.data.frame()%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd(na.rm=T)))
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)#%>%
stat_rt
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
as.data.frame()%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd(.,na.rm=T)))
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd(.,na.rm=T)))
stat_rt%>%
dplyr::group_by(sub.measure)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise_at(.,vars(mean),funs(mean(.,na.rm=T),sd))
tapply(stat_rt$mean,list(stat_rt$sub.measure,stat_rt$Type),describe)
stat_rt
tapply(stat_rt$mean,list(stat_rt$sub.measure,stat_rt$Type),mean)
tapply(stat_rt$mean,list(stat_rt$sub.measure,stat_rt$Type),mean,sd)
describe.by(stat_rt$mean,group = list(stat_rt$sub.measure))
describe.by(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
describBy(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
describeBy(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
stat_sub
describeBy(stat_sub$mean,group=stat_sub$Type)
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add = T)%>%
dplyr::summarise(mean=mean(sub.measure,na.rm=T)) ->stat_sub
stat_sub<-as.data.frame(stat_sub)
describeBy(stat_sub$mean,group=stat_sub$Type)
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
describeBy(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
stat_acc
stat_sample2[c(1:4)] #リストの中身を見る
#tapply関数を使って4つの条件の記述統計を求める
tapply(stat_acc$mean,list(stat_acc$Type,stat_acc$sub.measure),mean)
describeBy(stat_acc$mean,group = list(stat_acc$sub.measure,stat_acc$Type))
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
describeBy(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
#名詞ごとに，規則か直感かで正答率の差をみる
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::summarise(mean=mean(judgment,na.rm=T))->stat_acc
stat_acc<-as.data.frame(stat_acc)
stat_acc$sub.measure<-as.factor(stat_acc$sub.measure)
describeBy(stat_acc$mean,group = list(stat_acc$sub.measure,stat_acc$Type))
#名詞ごとに，規則か直感かで正答率の差をみる
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::summarise(mean=mean(judgment,na.rm=T))->stat_acc
stat_acc<-as.data.frame(stat_acc)
stat_acc$sub.measure<-as.factor(stat_acc$sub.measure)
describeBy(stat_acc$mean,group = list(stat_acc$sub.measure,stat_acc$Type))
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(Type,add = T)%>%
dplyr::summarise(mean=mean(sub.measure,na.rm=T)) ->stat_sub
stat_sub<-as.data.frame(stat_sub)
describeBy(stat_sub$mean,group=stat_sub$Type)
#For RT
sample2%>%
dplyr::group_by(ID)%>%
dplyr::group_by(sub.measure,add=T)%>%
dplyr::group_by(Type,add=T)%>%
dplyr::summarise(mean=mean(rt,na.rm=T)) ->stat_rt
stat_rt$sub.measure<-as.factor(stat_rt$sub.measure)
describeBy(stat_rt$mean,group = list(stat_rt$sub.measure,stat_rt$Type))
```{r, echo=F}
#beeswarmがなければインストールが必要->install.packages("beeswarm")
library(beeswarm)
acc.all<-cbind(stat_cnp$mean,stat_mnp$mean) #二つのデータフレームをくっつける
acc.all<-as.data.frame(acc.all)
names(acc.all)<-c("Common","Material") #列名をつける
head(acc.all) #確認
#平均値とその95％信頼区間を描くための準備
desc.cnp<-describe(stat_cnp$mean)
desc.mnp<-describe(stat_mnp$mean)
upper.cnp<-desc.cnp$mean+(1.96*desc.cnp$se) #信頼区間の上限
lower.cnp<-desc.cnp$mean-(1.96*desc.cnp$se) #信頼区間の下限
upper.mnp<-desc.mnp$mean+(1.96*desc.mnp$se)
lower.mnp<-desc.mnp$mean-(1.96*desc.mnp$se)
boxplot(acc.all,boxwex=0.5,ylim=c(0,1))#まずは箱ひげ図
beeswarm(acc.all,add=T,col="red") #蜂群図を重ねる
points(1.4,desc.cnp$mean,col="blue",pch=19,cex=1.5) #平均値の点をうつ
points(2.4,desc.mnp$mean,col="blue",pch=19,cex=1.5)
arrows(1.4,desc.cnp$mean,1.4,upper.cnp,angle = 90,length = 0.1,col="blue") #平均値から上下に線を引く
arrows(1.4,desc.cnp$mean,1.4,lower.cnp,angle = 90,length = 0.1,col="blue")
arrows(2.4,desc.mnp$mean,2.4,upper.mnp,angle = 90,length = 0.1,col="blue")
arrows(2.4,desc.mnp$mean,2.4,lower.mnp,angle = 90,length = 0.1,col="blue")
fit<-list()
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa"))
contrasts(sample2$sub.measure)
sample2$sub.measure<-as.factor(sample2$sub.measure)
contrasts(sample2$sub.measure)
contrasts(sample2$sub.measure)<-my.simple
contrasts(sample2$sub.measure)
sample2$Type<-as.factor(sample2$Type)
contrasts(sample2$Type)<-my.simple
#RTのデータは値が非常に大きく中心化だけではモデルが収縮しづらいので標準化する
sample2$zrt <-scale(sample2$rt)
View(sample2)
#RTのデータは値が非常に大きく中心化だけではモデルが収縮しづらいので標準化する
sample2$rt%>%
scale%>%
as.numeric->sample2$zrt
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa"))
library(beepr)
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa"))
beep(5)
beep(5)
summary(fit[[1]])
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa"optCtrl=list(maxfun=100000)))
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=100000)))
summary(fit[[1]])
10e5
fit[[1]]<-glmer(judgment~Type*sub.measure*zrt+(1+Type+sub.measure+zrt|ID)+(1+Type+sub.measure+zrt|itemID),family=binomial,data=sample2,glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(fit[[1]])
fit[[1]]@beta
fit[[1]]@theta
tab_model(fit[[1]])
tab_model(fit[[1]],show.est = T)
tab_model(fit[[1]],transform = exp)
tab_model(fit[[1]],transform = "exp")
tab_model(fit[[1]],show.stat = T)
tab_model(fit[[1]],show.stat = T,transform = NULL)
vif.mer(fit[[1]])
source("https://raw.githubusercontent.com/aufrank/R-hacks/master/mer-utils.R")
vif.mer(fit[[1]])
plot_model(fit[[1]],type="pred","Type","sub.measure")
plot_model(fit[[1]],type="pred",terms=c("Type","sub.measure"))
plot_model(fit[[1]],type="pred",terms=c("Type","zrt"))
plot_model(fit[[1]],type="pred",terms=c("zrt","Type"))
plot_model(fit[[1]],type="pred",terms=c("zrt","sub.measure"))
plot_model(fit[[1]],type="pred",terms=c("zrt","sub.measure","TYpe"))
plot_model(fit[[1]],type="pred",terms=c("zrt","sub.measure","Type"))
plot_model(fit[[1]],type="diag")
plot_model(fit[[1]],type="re")
plot_model(fit[[1]],type="re",sort.est = T,grid = F)
fit[[2]]<-update(fit[[1]],.~.-Type:sub.measure-Type:zrt-sub.measure:zrt,Type:sub.measure:zrt)
fit[[2]]<-update(fit[[1]],.~.-Type:sub.measure-Type:zrt-sub.measure:zrt-Type:sub.measure:zrt)
summary(fit[[2]])
fit[[2]]<-glmer(judgment~Type+sub.measure+
(1+Type+sub.measure|ID)+(1+Type+sub.measure|itemID)
,family=binomial,data=sample2,
glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
tab_model(fit[[2]])
plot_model(fit[[1]],type="re",sort.est = T,grid = F)
plot_model(fit[[1]],type="re",sort.est = T)
plot_model(fit[[1]],type="re")[[1]]
plot_model(fit[[2]],type="re")[[1]]
plot_model(fit[[2]],type="re",show.values = T)[[1]]
tab_model(fit[[2]])
summary(fit[[2]])
emmeans(fit[[1]],~Type|sub.measure)
emmeans(fit[[1]],~Type|sub.measure)
emmeans(fit[[1]],pairwise~Type|sub.measure)
1.231446%>%exp()
1.399276%>%exp()
model[[6]]
model[[5]]%>%summary
emmeans(model[[5]],~timing|group_by())
emmeans(model[[5]],~timing|group)
emmeans(model[[5]],pairwise~timing|group)
-1.3003%>%exp
1.3003%>%exp
0.47529%>%exp
emmeans(model[[5]],pairwise~timing|c.TOEIC)
emmeans(model[[5]],pairwise~c.TOEIC\timing)
emmeans(model[[5]],~c.TOEIC|timing)
emmeans(model[[5]],pairwise~c.TOEIC|timing)
emmeans(model[[5]],pairwise~group|timing)
emmeans(model[[5]],pairwise~timing|group)
xaringan:::inf_mr()
emmeans(model[[5]],pairwise~group|timing)$contrasts #事前と事後における群間比較
xaringan:::inf_mr()
sample2%>%
dplyr::filter(Type=="CNP")%>%
dplyr::group_by(ID)%>%
dplyr::summarise(mean=mean(judgment,na.rm=T))->stat_cnp #ランダムに欠損がある場合，na.rm=Tを指定しないと欠損のある学習者のデータが落ちてしまう
stat_cnp<-as.data.frame(stat_cnp)
#For common nouns
sample2%>%
dplyr::filter(Type=="MNP")%>%
dplyr::group_by(ID)%>%
dplyr::summarise(mean=mean(judgment,na.rm=T))->stat_mnp #ランダムに欠損がある場合，na.rm=Tを指定しないと欠損のある学習者のデータが落ちてしまう
stat_mnp<-as.data.frame(stat_mnp)
#平均値とその95％信頼区間を描くための準備
desc.cnp<-describe(stat_cnp$mean)
desc.mnp<-describe(stat_mnp$mean)
upper.cnp<-desc.cnp$mean+(1.96*desc.cnp$se) #信頼区間の上限
lower.cnp<-desc.cnp$mean-(1.96*desc.cnp$se) #信頼区間の下限
upper.mnp<-desc.mnp$mean+(1.96*desc.mnp$se)
lower.mnp<-desc.mnp$mean-(1.96*desc.mnp$se)
boxplot(acc.all,boxwex=0.5,ylim=c(0,1))#まずは箱ひげ図
beeswarm(acc.all,add=T,col="red") #蜂群図を重ねる
points(1.4,desc.cnp$mean,col="blue",pch=19,cex=1.5) #平均値の点をうつ
points(2.4,desc.mnp$mean,col="blue",pch=19,cex=1.5)
arrows(1.4,desc.cnp$mean,1.4,upper.cnp,angle = 90,length = 0.1,col="blue") #平均値から上下に線を引く
arrows(1.4,desc.cnp$mean,1.4,lower.cnp,angle = 90,length = 0.1,col="blue")
arrows(2.4,desc.mnp$mean,2.4,upper.mnp,angle = 90,length = 0.1,col="blue")
arrows(2.4,desc.mnp$mean,2.4,lower.mnp,angle = 90,length = 0.1,col="blue")
xaringan:::inf_mr()
